// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function find(numbers, needle) {
  var len = numbers.length;
  var safeGetByIndex = function (arr, idx) {
    try {
      return Caml_option.some(Caml_array.caml_array_get(arr, idx));
    }
    catch (raw_exn){
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
        return ;
      }
      throw exn;
    }
  };
  if (len === 0 || Caml_obj.caml_lessthan(needle, Caml_array.caml_array_get(numbers, 0)) || Caml_obj.caml_greaterthan(needle, Caml_array.caml_array_get(numbers, len - 1 | 0))) {
    return ;
  } else {
    var _numbers = numbers;
    var _offset = 0;
    while(true) {
      var offset = _offset;
      var numbers$1 = _numbers;
      var len$1 = numbers$1.length;
      if (len$1 === 0) {
        return ;
      }
      var mid = len$1 / 2 | 0;
      var midVal = safeGetByIndex(numbers$1, mid);
      if (midVal === undefined) {
        return ;
      }
      var value = Caml_option.valFromOption(midVal);
      if (Caml_obj.caml_equal(needle, value)) {
        return offset + mid | 0;
      }
      if (Caml_obj.caml_lessthan(needle, value)) {
        _numbers = $$Array.sub(numbers$1, 0, mid);
        continue ;
      }
      var rightLen = (len$1 - mid | 0) - 1 | 0;
      _offset = (offset + mid | 0) + 1 | 0;
      _numbers = $$Array.sub(numbers$1, mid + 1 | 0, rightLen);
      continue ;
    };
  }
}

exports.find = find;
/* No side effect */
